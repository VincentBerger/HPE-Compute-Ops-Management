---
# This playbook provides sample API requests for HPE Compute Ops Management. It is not intended for execution.
#
# To learn more about how to set up the API client credentials, see https://support.hpe.com/hpesc/public/docDisplay?docId=a00120892en_us 
#
# Preparation to run the playbook: 
#
# - Secure your HPE Compute Ops Management credentials, using Ansible vault to encrypt them. From the root of this Ansible project on the Ansible control node, run:   
#     
#   $ ansible-playbook vars/GLP_COM_API_credentials_encrypted.yml --ask-vault-password
#        
#   Once the password is entered, type the following content using your own API client credentials and connectivity endpoint:
#
#   ---
#   ClientID: "xxxxxxxx-xxxx-xxx-xxx-xxxxxxxxx"
#   ClientSecret: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
#   ConnectivityEndpoint: "https://<connectivity_endpoint>-api.compute.cloud.hpe.com"
#      
#   Note: To access the HPE Compute Ops Management API, you need to create your client credentials on the HPE GreenLake platform, see https://support.hpe.com/hpesc/public/docDisplay?docId=a00120892en_us&page=GUID-23E6EE78-AAB7-472C-8D16-7169938BE628.html
#
# - To run this playbook, use:
#
#   $ ansible-playbook COM-Native-API-request-samples.yml --ask-vault-password 
#
#   With a pass file containing the vault/become password:
#   $ ansible-playbook COM-Native-API-request-samples.yml --vault-password-file vault_pass.txt
#
# Author: lionel.jullien@hpe.com
# Date:   July 2022

    
#################################################################################
#        (C) Copyright 2022 Hewlett Packard Enterprise Development LP           #
#################################################################################
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
# THE SOFTWARE.                                                                 #
#                                                                               #
#################################################################################
#>


- hosts: localhost
  gather_facts: no
  vars_files:
    - vars/api_versions.yml # Contains the API versions for the resources used in this playbook
    - vars/GLP_COM_API_credentials_encrypted.yml # Contains the HPE Compute Ops Management API credentials and connectivity endpoint    
     
  tasks:    


#--------------------------------------Authentication with COM---------------------------------------------------------------------------------------------------------

  - name: Create HPE Compute Ops Management session
    import_tasks: files/Create_COM_session.yml


#--------------------------------------Capture Job Templates Resource Uri-----------------------------------------------------------------------------------------------
  
  - name: Capture Job Templates ResourceUri
    import_tasks: files/Get_job_templates_resourceuri.yml


#--------------------------------------SERVERS task samples-------------------------------------------------------------------------------------

  - name: Collect all servers
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ servers_API_version }}/servers?limit=100"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: servers


  # - name: Display all servers
  #   debug: var=servers

  - name: Set variable serverID for server RHEL90-1.lj.lab
    set_fact:
      serverID:  "{{ (servers | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='RHEL90-1.lj.lab'].id"

  - debug: var=serverID

  - name: Collect server by ID
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ servers_API_version }}/servers/{{ serverID }}"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: server

  - name: Display Server 'RHEL90-1.lj.lab'
    debug: var=server

  - name: Collect first 10 servers
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ servers_API_version }}/servers?limit=10"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: servers

  # - name: Display the first 10 servers
  #   debug: var=servers


#--------------------------------------ACTIVITIES task samples----------------------------------------------------------------------------------

  - name: List all activities
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ activities_API_version }}/activities"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: activities

  - name: Display all activities
    debug: var=activities

  - name: List last activity
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ activities_API_version }}/activities?limit=1"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: activities

  - name: Display the last activity
    debug: var=activities


#--------------------------------------FIRMWARE-BUNDLES task samples----------------------------------------------------------------------------

  - name: List all firmware bundles
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ firmware_bundles_API_version }}/firmware-bundles"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: firmwarebundles

  - name: Display all firmware bundles
    debug: var=firmwarebundles

  - name: Set variable firmwarebundleID for firmware bundles SPP 2022.03.0
    set_fact:
      firmwarebundleID:  "{{ (firmwarebundles | json_query(query) )[0] }}"
    vars:
      query: "json.items[?releaseVersion=='2022.03.0'].id"

  - debug: var=firmwarebundleID

  - name: List firmware bundle 2022.03.0
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ firmware_bundles_API_version }}/firmware-bundles/{{ firmwarebundleID }}"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: firmwarebundle

  - name: Display firmware bundle 2022.03.0
    debug: var=firmwarebundle  


#--------------------------------------GROUPS task samples--------------------------------------------------------------------------------------

  - name: List all groups
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    # Note: you cannot use groups as a variable name as it is a predefined variable name in Ansible
    # group_names and groups are predefined by Ansible
    register: allgroups

  - name: Set a variable for items property 
    set_fact:
      items: "{{ allgroups | json_query(query) }}"
    vars:
      query: "json.items"

  - name: Loop over list items
    debug:
      msg: "{{ item.name }}"
    loop: "{{ items }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Set variable groupid for 'ESXi_group'
    set_fact:
      groupid:  "{{ (allgroups | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='ESXi_group'].id"
  
  - debug: var=groupid

  - name: Set variable groupuri for a group 
    set_fact:
      groupuri:  "{{ (allgroups | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='ESXi_group'].resourceUri"

  - debug: var=groupuri


  - name: List group 'Production-Group'
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: group

  # - name: Display group 'Production-Group'
  #   debug: var=group  

  - name: Get the critical event notification status of a group
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}/notifications"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: notifications

  # - name: Display the critical event notification status of a group 
  #   debug: var=notifications.json  

  - name: Modify the critical event notification status of a group
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}/notifications"
      method: PUT
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        criticalNotification: "True"  
    register: result

  # - name: Display response of the request
  #   debug: var=result

  - name: Create group Production-Group
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups"
      method: POST
      status_code: 201
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        name: "Production-Group"
        description: "My Production Group with DL360 Gen10 Plus servers"
        firmwareBaseline: "{{ firmwarebundleID }}"
        autoIloFwUpdateEnabled: 'True'
        autoFwUpdateOnAdd: 'False'
        deviceSettingsUris: []
        data: {}
        tags:
          location: "Houston"
    register: result

  # - name: Display response of the request
  #   debug: var=result

  - name: Modify a group 
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}"
      method: PATCH
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/merge-patch+json"
      body_format: json
      body:
        description: "This is my Production Group"
        autoFwUpdateOnAdd: 'True'
    register: result

  # - name: Display response of the request
  #   debug: var=result

  - name: Assigns devices to a group 
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}/devices"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        devices:
          # Only servers that are not part of a group can be assigned to a group.
          - serverId: P38471-B21+J208PP003O
          - serverId: P39886-B21+CN70490RXP
    register: result

  # - name: Display response of the request
  #   debug: var=result

  - name: Unassigns all devices from a group 
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}/devices?force=true"
      method: DELETE
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: result

  # - name: Display response of the request
  #   debug: var=result    

  - name: Unassigns a device from a group 
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}/devices/P38471-B21+J208PP003O"
      method: DELETE
      status_code: 204
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: result

  # - name: Display response of the request
  #   debug: var=result    

  - name: Delete a group 
    # You cannot delete Group if servers are still assigned to the group. 
    # If you would like to remove all device and delete the group, provide the query parameter force=true
    # like {{url}}/compute-ops-mgmt/v1beta1/groups/{{group_id}}?force=true
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ groups_API_version }}/groups/{{ groupid }}"
      method: DELETE
      status_code: 204
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: result

  # - name: Display response of the request
  #   debug: var=result  


#--------------------------------------JOB TEMPLATES task samples-------------------------------------------------------------------------------

  - name: List all job templates
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ job_templates_API_version }}/job-templates"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: jobtemplates

  # - name: Display all job templates
  #   debug: var=jobtemplates  

  - name: Set variable jobtemplateid for FirmwareUpdate 
    set_fact:
      jobtemplateid:  "{{ (jobtemplates | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='FirmwareUpdate'].id"

  # - debug: var=jobtemplateid

  - name: Set variable jobtemplateuri for 'GroupFirmwareUpdate' 
    # GroupFirmwareUpdate is the template to use to initiate a group firmware update
    set_fact:
      jobtemplateuri:  "{{ (jobtemplates | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='GroupFirmwareUpdate'].resourceUri"

  # - debug: var=jobtemplateuri


#--------------------------------------JOBS task samples----------------------------------------------------------------------------------------

  - name: List all jobs
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ jobs_API_version }}/jobs"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: jobs

  # - name: Display all jobs
  #   debug: var=jobs  
    
  - name: Set variable jobID for ColdBoot 
    set_fact:
      jobID:  "{{ (jobs | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='ColdBoot'].id"

  # - debug: var=jobID

  - name: Collect job by ID
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ jobs_API_version }}/jobs/{{ jobID }}"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: job

  - name: Display job 'ColdBoot'
    debug: var=job

  - name: Set a variable for devices part of group 'Production-Group' for the following job to start the firmware update
    set_fact:
      devices:  "{{ group.json.devices |  map(attribute='id') | list  }}"
  
  # - debug: var=devices

  - name: Create a job to start a firmware update
    # This job will update all servers in the group "DL360Gen10plus-Production-Group" with SPP 2022.03.0
    # Warning: Firmware updates other than iLO FW may require a server reboot!
    # Note: To set schedule options during updates, you must create a schedule instead of a job
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ jobs_API_version }}/jobs"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        jobTemplateUri: "{{ jobtemplateuri }}"
        resourceUri: "{{ groupuri }}"
        data:
          bundle_id: "{{ firmwarebundleID }}"
          # The list of devices must be provided even if they are already part of the group!
          devices: "{{ devices }}"
    register: result

  # - name: Display job creation result
  #   debug: var=result


#--------------------------------------SCHEDULES task samples-----------------------------------------------------------------------------------

  - name: List all schedules
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: schedules

  # - name: Display all schedules
  #   debug: var=schedules  
 
  - name: Set variable scheduleID for 'Firmware update for group Production'
    set_fact:
      scheduleID:  "{{ (schedules | json_query(query) )[0] }}"
    vars:
      query: "json.items[?name=='Schedule for Production-Group'].id"

  # - debug: var=scheduleID

  - name: Collect schedule by ID
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules/{{ scheduleID }}"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: schedule

  # - name: Display schedule 'Firmware update for group Production'
  #   debug: var=schedule

  - name: Modify a schedule
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules/{{ scheduleID }}"
      method: PATCH
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/merge-patch+json"
      body_format: json
      body:
        description: "This is my new firmware update schedule for Production Group"
        schedule:
          startAt: "{{ '2022-10-01 4:00:00' | to_datetime }}"
    register: result

  # - name: Display response of the request
  #   debug: var=result

  - name: List all history of a schedule
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules/{{ scheduleID }}/history"
      method: GET
      headers:
        Authorization: "Bearer {{ access_token }}"
    register: schedulehistory

  # - name: Display all history of a schedule
  #   debug: var=schedulehistory
  
  - name: Delete a schedule by ID
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules/{{ scheduleID }}"
      method: DELETE
      headers:
        Authorization: "Bearer {{ access_token }}"

  - name: Create a schedule to run a firmware update for 'Production' on '2022-09-01 2:00:00'
    # This schedule will update all servers in the group with the currently defined SPP
    # Warning: Any updates other than iLO FW require a server reboot!
    # Note: To perform an immediate update, you must create a job instead of a schedule
    uri:
      url: "{{ ConnectivityEndpoint }}/compute-ops-mgmt/{{ schedules_API_version }}/schedules"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token }}"
        Content-Type: "application/json"
      body_format: json
      status_code: 
       - 200
       - 201
      body:
        name: "Schedule for group Production"
        description: "Firmware baseline update for group Production"
        associatedResourceUri: "/api/compute/v1/groups/{{ groupid }}"
        purpose: "GROUP_FW_UPDATE"
        schedule:
          # Interval can be P7D for 7 days intervals, P15m, P1M, P1Y
          interval: Null
          startAt: "2022-09-01 2:00:00 | to_datetime"
        operation:
          type: "REST"
          method: "POST"
          uri: "/api/compute/v1/jobs"
          body:
            resourceUri: "/api/compute/v1/groups/{{ groupid }}"
            jobTemplateUri: "/api/compute/v1/job-templates/{{ jobtemplateid }}"
            data:
              # The list of devices must be provided even if they are already part of the group!
              devices: 
                - P38471-B21+J208PP003S
                - P43357-B21+K30APP003S
              parallel: true
              stopOnFailure: false
    register: result

  # - name: Display schedule creation result
  #   debug: var=result
